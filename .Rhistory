knitr::opts_chunk$set(echo = TRUE,
out.width = '80%',
fig.align = "center")
rm(list = ls()) #clean environment
require(tidyverse)
require(readr)
require(tidytext)
require(wordcloud)
require(scales)
require(reshape2)
library(forcats)
library(igraph)
library(ggraph)
require(tm)
require(widyr)
require(topicmodels)
data("stop_words")
afinn <- get_sentiments("afinn")
bing <- get_sentiments("bing")
nrc <- get_sentiments("nrc")
#wd <- "C:\\GitHub\\heart_disease\\"
fldr <- "C:/GitHub/music_lyrics/"
# Custom ggplot theme
cust_theme <- theme_minimal() +
theme(panel.grid.major = element_line(color = "#e1e1e1",  linetype = "dotted"),
panel.grid.minor = element_blank(),
legend.position  = "bottom",
legend.key       = element_blank())
cbPalette <- c("#E69F00", "#999999", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7",
"#CC6666", "#9999CC", "#66CC99") #2nd line is extra
blue_palette <- c("#004f79", "#0085ca",  "#66b5df", "#474747","#eeeeee")
# get all artists from data folder
artists <- list.dirs(path = paste0(fldr, "data/"),
full.names = FALSE,
recursive = FALSE)
# for each artist get all album names into df with one row per each combination
artists_albums_df <- tibble()
for (i in 1:length(artists)){
albums <- list.dirs(path = paste0(fldr, "data/", artists[i]),
full.names = FALSE,
recursive = FALSE)
for (j in 1:length(albums)){
artist_album_row <- c(artists[i], albums[j])
names(artist_album_row) <- c("artist", "album")
artists_albums_df <- bind_rows(artists_albums_df,
artist_album_row)
}
}
# for each album, get all the song names and lyrics into a df
lyrics_df <- tibble()
for (i in 1:nrow(artists_albums_df)){
album_path <- paste0(fldr, "data/",
artists_albums_df[i,1], "/", #artist
artists_albums_df[i,2]) #album
songs <- list.files(album_path)
for (j in 1:length(songs)){
song_num <- unlist(str_split(songs[j], pattern = "_"))[1]
song_name <- unlist(str_split(songs[j], pattern = "_"))[2]
song_path <- paste0(album_path, "/", songs[j])
lyrics <- read_file(song_path)
print(song_path)
song_name <- strsplit(song_name, split = "[.]")[[1]][1]
lyric_row <- c(artists_albums_df[i,1],
artists_albums_df[i,2],
paste0(artists_albums_df[i,1], ": ", artists_albums_df[i,2]),
song_num,
song_name,
lyrics)
names(lyric_row) <- c("artist", "album", "artist_album",
"song_num", "song", "lyrics")
lyrics_df <- bind_rows(lyrics_df, lyric_row)
}
}
lyrics_df %>%
group_by(artist_album) %>%
tally()
print(lyrics_df)
# tokenize lyrics per sentence
lyrics_sentences <- lyrics_df %>%
unnest_tokens(song_line, lyrics, token = "lines") %>%
mutate(artist_album_song = paste0(artist_album, song)) %>%
group_by(artist_album_song) %>%
mutate(song_line_number = row_number()) %>%
ungroup() %>%
select(-artist_album_song)
# tokenize lyrics per word
lyrics_words <- lyrics_sentences %>%
unnest_tokens(word, song_line)
# remove stop words
lyrics_words <- lyrics_words %>%
anti_join(stop_words)
# print # of words per album
lyrics_words %>%
group_by(artist_album) %>%
summarise(number_of_words = n())
# print # of words per album
lyrics_words %>%
group_by(artist_album) %>%
summarise(number_of_words = n())
knitr::opts_chunk$set(echo = TRUE,
out.width = '80%',
fig.align = "center")
rm(list = ls()) #clean environment
require(tidyverse)
require(readr)
require(tidytext)
require(wordcloud)
require(scales)
require(reshape2)
library(forcats)
library(igraph)
library(ggraph)
require(tm)
require(widyr)
require(topicmodels)
data("stop_words")
afinn <- get_sentiments("afinn")
bing <- get_sentiments("bing")
nrc <- get_sentiments("nrc")
#wd <- "C:\\GitHub\\heart_disease\\"
fldr <- "C:/GitHub/music_lyrics/"
# Custom ggplot theme
cust_theme <- theme_minimal() +
theme(panel.grid.major = element_line(color = "#e1e1e1",  linetype = "dotted"),
panel.grid.minor = element_blank(),
legend.position  = "bottom",
legend.key       = element_blank())
cbPalette <- c("#E69F00", "#999999", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7",
"#CC6666", "#9999CC", "#66CC99") #2nd line is extra
blue_palette <- c("#004f79", "#0085ca",  "#66b5df", "#474747","#eeeeee")
# get all artists from data folder
artists <- list.dirs(path = paste0(fldr, "data/"),
full.names = FALSE,
recursive = FALSE)
# for each artist get all album names into df with one row per each combination
artists_albums_df <- tibble()
for (i in 1:length(artists)){
albums <- list.dirs(path = paste0(fldr, "data/", artists[i]),
full.names = FALSE,
recursive = FALSE)
for (j in 1:length(albums)){
artist_album_row <- c(artists[i], albums[j])
names(artist_album_row) <- c("artist", "album")
artists_albums_df <- bind_rows(artists_albums_df,
artist_album_row)
}
}
# for each album, get all the song names and lyrics into a df
lyrics_df <- tibble()
for (i in 1:nrow(artists_albums_df)){
album_path <- paste0(fldr, "data/",
artists_albums_df[i,1], "/", #artist
artists_albums_df[i,2]) #album
songs <- list.files(album_path)
for (j in 1:length(songs)){
song_num <- unlist(str_split(songs[j], pattern = "_"))[1]
song_name <- unlist(str_split(songs[j], pattern = "_"))[2]
song_path <- paste0(album_path, "/", songs[j])
lyrics <- read_file(song_path)
print(song_path)
song_name <- strsplit(song_name, split = "[.]")[[1]][1]
lyric_row <- c(artists_albums_df[i,1],
artists_albums_df[i,2],
paste0(artists_albums_df[i,1], ": ", artists_albums_df[i,2]),
song_num,
song_name,
lyrics)
names(lyric_row) <- c("artist", "album", "artist_album",
"song_num", "song", "lyrics")
lyrics_df <- bind_rows(lyrics_df, lyric_row)
}
}
lyrics_df %>%
group_by(artist_album) %>%
tally()
print(lyrics_df)
# tokenize lyrics per sentence
lyrics_sentences <- lyrics_df %>%
unnest_tokens(song_line, lyrics, token = "lines") %>%
mutate(artist_album_song = paste0(artist_album, song)) %>%
group_by(artist_album_song) %>%
mutate(song_line_number = row_number()) %>%
ungroup() %>%
select(-artist_album_song)
# tokenize lyrics per word
lyrics_words <- lyrics_sentences %>%
unnest_tokens(word, song_line)
# remove stop words
lyrics_words <- lyrics_words %>%
anti_join(stop_words)
# print # of words per album
lyrics_words %>%
group_by(artist_album) %>%
summarise(number_of_words = n())
# most common words across all albums
# a mix of love and war
lyrics_words %>%
count(word, sort = TRUE)
# plot top 10 most common words
lyrics_words %>%
count(word, sort = TRUE) %>%
slice(1:10) %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(n,word)) +
geom_col()
# plot top 10 most common words
lyrics_words %>%
count(word, sort = TRUE) %>%
slice(1:10) %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(n,word)) +
geom_col() +
cust_theme
# plot top 10 most common words
lyrics_words %>%
count(word, sort = TRUE) %>%
slice(1:10) %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(n,word)) +
geom_col(color = blue_palette[2]) +
cust_theme
# plot top 10 most common words
lyrics_words %>%
count(word, sort = TRUE) %>%
slice(1:10) %>%
mutate(word = reorder(word,n)) %>%
ggplot(aes(n,word)) +
geom_col(fill = blue_palette[2]) +
cust_theme
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:10) %>%
print(n = Inf)
# add plot
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:10) %>%
print(n = Inf)
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL) +
cust_theme
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free_x") +
labs(x = NULL,
y = NULL) +
cust_theme
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free_y") +
labs(x = NULL,
y = NULL) +
cust_theme
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free_y", scales = "free_x") +
labs(x = NULL,
y = NULL) +
cust_theme
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, scales = c("free_y","free_x")) +
labs(x = NULL,
y = NULL) +
cust_theme
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free") +
labs(x = NULL,
y = NULL) +
cust_theme
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free") +
labs(x = NULL,
y = NULL) +
cust_theme
# top sentiments per album
nrc_filtered <- nrc %>%
filter(sentiment != "positive" & sentiment != "negative")
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:5)
# plot sentiment change by album (calculated by line)
albumns_sentiment <- lyrics_words %>%
inner_join(bing) %>%
count(artist_album, song_line_number, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(albumns_sentiment, aes(song_line_number, sentiment, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
cust_theme
# plot sentiment change by album (calculated by line)
albumns_sentiment <- lyrics_words %>%
inner_join(bing) %>%
count(artist_album, song_line_number, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(albumns_sentiment, aes(song_line_number, sentiment, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
cust_theme
ggplot(albumns_sentiment, aes(song_line_number, sentiment, fill = artist_album)) +
geom_line(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
cust_theme
ggplot(albumns_sentiment, aes(song_line_number, sentiment, fill = artist_album)) +
geom_line(color = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
cust_theme
# plot sentiment change by album (calculated by line)
albumns_sentiment <- lyrics_words %>%
inner_join(bing) %>%
count(artist_album, song_line_number, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(albumns_sentiment, aes(song_line_number, sentiment, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
cust_theme
# top sentiments per album
nrc_filtered <- nrc %>%
filter(sentiment != "positive" & sentiment != "negative")
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:5)
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
#count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free") +
labs(x = NULL,
y = NULL) +
cust_theme
# top sentiments per album
nrc_filtered <- nrc %>%
filter(sentiment != "positive" & sentiment != "negative")
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
#count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free") +
labs(x = NULL,
y = NULL) +
cust_theme
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
#count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 5, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free") +
labs(x = NULL,
y = NULL) +
cust_theme
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE)
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
#count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 5, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free") +
labs(x = NULL,
y = NULL) +
cust_theme
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
#count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 5, with_ties = FALSE) %>%
ungroup()
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup()
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
#count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 5, with_ties = FALSE) %>%
ungroup()
# top sentiments per album
nrc_filtered <- nrc %>%
filter(sentiment != "positive" & sentiment != "negative")
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:5)
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
#count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(n, n = 5, with_ties = FALSE) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, n)) %>%
ggplot(aes(n, sentiment, fill = artist_album)) +
geom_col(fill = blue_palette[2],
show.legend = FALSE) +
facet_wrap(~artist_album, scales = "free") +
labs(x = NULL,
y = NULL) +
cust_theme
