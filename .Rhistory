inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE)
xfactor %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE)
t1989 %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE)
sent_beast <- beast %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE)
sent_xfactor <- xfactor %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE)
sent_t1989 <- t1989 %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE)
top_sentiments_by_album <- rbind(sent_beast,
sent_xfactor,
sent_t1989)
top_sentiments_by_album
top_sentiments_by_album <- rbind(c(sent_beast,"beast"),
c(sent_xfactor, "xfactor"),
c(sent_t1989, "t1989"))
View(top_sentiments_by_album)
View(sent_beast)
sent_beast <- beast %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(album = "beast")
View(sent_beast)
top_sentiments_by_album <- rbind(sent_beast,
sent_xfactor,
sent_t1989)
sent_beast <- beast %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(album = "beast")
sent_xfactor <- xfactor %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(album = "xfactor")
sent_t1989 <- t1989 %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(album = "t1989")
top_sentiments_by_album <- rbind(sent_beast,
sent_xfactor,
sent_t1989)
View(top_sentiments_by_album)
ggplot(frequency, aes(x = proportion, y = `The X Factor`,
color = abs(`The X Factor` - proportion))) +
theme_minimal() +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
#scale_color_gradient(limits = c(0, 0.001),
#                     low = "darkslategray4", high = "gray75") +
facet_wrap(~album, ncol = 2) +
theme(legend.position="none") +
labs(y = "The X Factor", x = NULL)
ggplot(top_sentiments_by_album) +
theme_minimal()
View(top_sentiments_by_album)
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x= album)) +
theme_minimal()
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x= album)) +
geom_bar() +
theme_minimal()
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x= album)) +
theme_minimal() +
geom_bar()
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x= album)) +
theme_minimal() +
geom_bar(stat="identity")
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x= album)) +
theme_minimal() +
geom_bar(stat="identity", position = "fill")
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x= album)) +
theme_minimal() +
geom_bar(stat="identity", position = "fill") +
facet_wrap(~album)
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x= album)) +
theme_minimal() +
geom_bar(stat="identity", position = "dodge") +
facet_wrap(~album)
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x = sentiment)) +
theme_minimal() +
geom_bar(stat="identity", position = "dodge") +
facet_wrap(~album)
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x = sentiment)) +
theme_minimal() +
geom_col(aes(count, sentiment), fill = BLUE, width = 0.6)
ggplot(top_sentiments_by_album,
aes(fill = sentiment, y = n, x = sentiment)) +
theme_minimal() +
geom_col(aes(count, sentiment), fill = sentiment, width = 0.6)
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(count, sentiment), fill = sentiment, width = 0.6)
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(count, sentiment))
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(n, sentiment))
facet_wrap(~album)
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(n, sentiment)) +
facet_wrap(~album)
# plot side by side, order by sentiment/album
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(n, sentiment), fill = sentiment) +
facet_wrap(~album)
# plot side by side, order by sentiment/album
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(n, sentiment), color = sentiment) +
facet_wrap(~album)
facet_wrap(~album)
# plot side by side, order by sentiment/album
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(n, sentiment, fill = sentiment)) +
facet_wrap(~album)
# plot side by side, order by sentiment/album
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(x = n, y = sentiment, fill = sentiment)) +
facet_wrap(~album)
sent_beast <- beast %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "beast")
View(sent_beast)
sent_xfactor <- xfactor %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "xfactor")
sent_beast <- beast %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "beast")
sent_xfactor <- xfactor %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "xfactor")
sent_t1989 <- t1989 %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "t1989")
top_sentiments_by_album <- rbind(sent_beast,
sent_xfactor,
sent_t1989)
View(top_sentiments_by_album)
# plot side by side, order by sentiment/album
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(x = p, y = sentiment, fill = sentiment)) +
facet_wrap(~album)
top_sentiments_by_album %>%
group_by(album) %>%
#slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
top_sentiments_by_album %>%
group_by(album) %>%
#slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
#slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
sent_beast <- beast %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "Number of the Beast")
sent_xfactor <- xfactor %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "The X-Factor")
sent_t1989 <- t1989 %>%
#filter(book == "Emma") %>%
inner_join(nrc_filtered,
relationship = "many-to-many") %>%
count(sentiment, sort = TRUE) %>%
mutate(p = n/sum(n)) %>%
mutate(album = "1989")
top_sentiments_by_album <- rbind(sent_beast,
sent_xfactor,
sent_t1989)
# plot side by side, order by sentiment/album
ggplot(top_sentiments_by_album) +
theme_minimal() +
geom_col(aes(x = p, y = sentiment, fill = sentiment)) +
facet_wrap(~album)
top_sentiments_by_album %>%
group_by(album) %>%
#slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 5) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 8) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 7) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album)
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10)
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10) %>%
ungroup()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, n)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, n)) %>%
ggplot(aes(n, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, n))
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, n)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 7) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 7) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p))
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 7) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_x") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
top_sentiments_by_album %>%
group_by(album) %>%
slice_max(n, n = 7) %>%
ungroup() %>%
mutate(sentiment = reorder(sentiment, p)) %>%
ggplot(aes(p, sentiment, fill = album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~album, scales = "free_y") +
labs(x = "Sentiment by Album",
y = NULL) +
theme_minimal()
View(lyrics_df)
lyrics_df$lyrics
lyrics_df[1,]
lyrics_df[1,4]
lyrics_df[1,5]
lyrics_df[1,5]
s <- lyrics_df[1,5]
str_split(s)
str_split(s, pattern = "\r\n")
# cpmpre novels like fig 1.3
frequency <- lyrics_tokens_df %>%
#arrange(desc(album)) %>%
select(album, word) %>%
count(album, word) %>%
group_by(album) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
pivot_wider(names_from = album, values_from = proportion) %>%
#select(word, `Number of the Beast`, `The X Factor`, `1989`) %>%
pivot_longer(`1989`:`Number of the Beast`,
names_to = "album", values_to = "proportion")
ggplot(frequency, aes(x = proportion, y = `The X Factor`,
color = abs(`The X Factor` - proportion))) +
theme_minimal() +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
#scale_color_gradient(limits = c(0, 0.001),
#                     low = "darkslategray4", high = "gray75") +
facet_wrap(~album, ncol = 2) +
theme(legend.position="none") +
labs(y = "The X Factor", x = NULL)
beast
# so what are the fear words of the 3? vs the joy words?
nrc_fear <- get_sentiments("nrc") %>%
filter(sentiment == "fear")
View(nrc_fear)
beast %>%
# filter(book == "Emma") %>%
inner_join(nrc_fear) %>%
count(word, sort = TRUE)
t9189 %>%
# filter(book == "Emma") %>%
inner_join(nrc_fear) %>%
count(word, sort = TRUE)
t1989 %>%
# filter(book == "Emma") %>%
inner_join(nrc_fear) %>%
count(word, sort = TRUE)
xfactor %>%
# filter(book == "Emma") %>%
inner_join(nrc_fear) %>%
count(word, sort = TRUE)
View(lyrics_tokens_df)
# so what are the fear words of the 3? vs the joy words?
sentiments_to_iterate <- c("fear", "joy")
albums_to_iterate <- c(beast, xfactor, t1989)
# that's good but let's do in a loop
sentiments_to_iterate <- c("fear", "joy")
albums_to_iterate <- c(beast, xfactor, t1989)
dim(sentiments_to_iterate)
length(sentiments_to_iterate)
for (i in 1:length(sentiments_to_iterate)){
print(sentiments_to_iterate[i])
}
for (i in 1:length(sentiments_to_iterate)){
sentiment <- sentiments_to_iterate[i]
print(sentiment)
}
for (i in 1:length(sentiments_to_iterate)){
sentiment <- sentiments_to_iterate[i]
print(unlist(sentiment))
}
sent <- sentiments_to_iterate[i]
print(sent)
for (i in 1:length(sentiments_to_iterate)){
sent <- sentiments_to_iterate[i]
print(sent)
# filter nrc
nrc_fear <- get_sentiments("nrc") %>%
filter(sentiment == sent)
}
View(nrc_fear)
for (i in 1:length(sentiments_to_iterate)){
sent <- sentiments_to_iterate[i]
print(sent)
# filter nrc
nrc_sent <- get_sentiments("nrc") %>%
filter(sentiment == sent)
print(dim(nrc_sent))
}
