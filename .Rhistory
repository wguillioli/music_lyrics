nrc_sad <- get_sentiments("nrc") %>%
filter(sentiment == "sadness")
View(lyrics_words)
View(lyrics_words)
lyrics_words %>%
filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(word, sort = TRUE)
View(lyrics_words)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(word, sort = TRUE)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
group_by(album_artist)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(album_artist, word)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(order_by = n, n = 5)
# most common words per album
lyrics_words %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:10) %>%
print(n = Inf)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(order_by = n, n = 5)
top_sad <- lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(order_by = n, n = 5)
View(top_sad)
ggplot(top_sad, aes(word, n, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
coord_flip()
ggplot(top_sad, aes(word, n, fill = artist_album)) +
geom_col(show.legend = FALSE, freeny.y = TRUE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
coord_flip()
ggplot(top_sad, aes(word, n, fill = artist_album)) +
geom_col(show.legend = FALSE, free.y = TRUE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
coord_flip()
ggplot(top_sad, aes(word, n, fill = artist_album)) +
geom_col(show.legend = FALSE, free.x = TRUE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
coord_flip()
# plot sentiment change by album (calculated by line)
albumns_sentiment <- lyrics_words %>%
inner_join(bing) %>%
count(artist_album, song_line_number, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(albumns_sentiment, aes(song_line_number, sentiment, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x")
# top sentiments per album
nrc_filtered <- nrc %>%
filter(sentiment != "positive" & sentiment != "negative")
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:10)
lyrics_words %>%
inner_join(nrc_filtered, relationship = "many-to-many") %>%
count(artist_album, sentiment, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:5)
# sadness is common, so what are the top sad words for each album
nrc_sad <- get_sentiments("nrc") %>%
filter(sentiment == "sadness")
top_sad <- lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(order_by = n, n = 5)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(order_by = n, n = 5)
lyrics_words %>%
#filter(album == "Number of the Beast") %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice_max(order_by = n, n = 5)
lyrics_words %>%
inner_join(nrc_sad) %>%
count(artist_album, word, sort = TRUE) %>%
group_by(artist_album) %>%
slice(1:5) %>%
print(n = Inf)
lyrics_words %>%
inner_join(bing)
lyrics_words %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE)
lyrics_words %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
lyrics_words_top <- lyrics_words %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
unique(lyrics_words$artist_album)
albums_to_parse <- unique(lyrics_words$artist_album)
albums_to_parse
albums_to_parse[1]
for (i in 1:length(albums_to_parse)){
print(i)
}
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i])
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
}
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i])
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
}
albums_to_parse <- unique(lyrics_words$artist_album)
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i])
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 3) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
}
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i]) %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 3) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
}
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i]) %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
myplot <- lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 3) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
print(myplot)
}
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i]) %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
myplot <- lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
print(myplot)
}
?slice_max
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i]) %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
myplot <- lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
print(myplot)
}
for (i in 1:length(albums_to_parse)){
print(i)
lyrics_words_top <- lyrics_words %>%
filter(artist_album == albums_to_parse[i]) %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
myplot <- lyrics_words_top %>%
group_by(sentiment) %>%
slice_max(n, n = 10, with_ties = FALSE) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL) +
ggtitle(albums_to_parse[i])
print(myplot)
}
# tokenize lyrics per word
lyrics_words <- lyrics_sentences %>%
unnest_tokens(word, song_line)
# remove stop words
lyrics_words <- lyrics_words %>%
anti_join(stop_words)
View(lyrics_words)
# hallowed not positive necesariamente
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
# hallowed not positive necesariamente
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
# hallowed not positive necesariamente
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
# hallowed not positive necesariamente
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(1)
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(1)
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(1)
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(666)
lyrics_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
for (i in 1:length(albums_to_parse)){
set.seed(666)
plot_wc <- lyrics_words %>%
filter(artist_album == albums_to_parse[i])
count(word) %>%
with(wordcloud(word, n, max.words = 100))
plot(plot_wd)
}
# word clouds by album
for (i in 1:length(albums_to_parse)){
set.seed(666)
plot_wc <- lyrics_words %>%
filter(artist_album == albums_to_parse[i]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
plot(plot_wd)
}
# word clouds by album
for (i in 1:length(albums_to_parse)){
set.seed(666)
plot_wc <- lyrics_words %>%
filter(artist_album == albums_to_parse[i]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
plot(plot_wc)
}
set.seed(666)
plot_wc <- lyrics_words %>%
filter(artist_album == albums_to_parse[1]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
plot(plot_wc)
set.seed(666)
plot_wc <- lyrics_words %>%
filter(artist_album == albums_to_parse[2]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
plot(plot_wc)
set.seed(666)
lyrics_words %>%
filter(artist_album == albums_to_parse[1]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(666)
lyrics_words %>%
filter(artist_album == albums_to_parse[2]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(666)
lyrics_words %>%
filter(artist_album == albums_to_parse[3]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
?wordcloud
set.seed(666)
lyrics_words %>%
filter(artist_album == albums_to_parse[1]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(666)
lyrics_words %>%
filter(artist_album == albums_to_parse[2]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
set.seed(666)
lyrics_words %>%
filter(artist_album == albums_to_parse[3]) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
?comparison.cloud
# compare wc for pos and neg for all albums
lyrics_words %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
require(reshape2)
# compare wc for pos and neg for all albums
lyrics_words %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
# compare wc for pos and neg for all albums
lyrics_words %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 75)
View(lyrics_words)
lyrics_words %>%
group_by(artist_album, song) %>%
summarise(words = n())
View(lyrics_words)
words_per_song <- lyrics_words %>%
group_by(artist_album, song) %>%
summarise(words = n())
View(words_per_song)
negative <- bing %>%
filter(sentiment == "negative")
View(negative)
negative_words_per_song <- lyrics_words %>%
semi_join(negative)
negative_words_per_song <- lyrics_words %>%
inner_join(negative)
View(negative_words_per_song)
negative_words_per_song <- lyrics_words %>%
semi_join(negative)
View(negative_words_per_song)
View(words_per_song)
View(negative_words_per_song)
negative_words_per_song %>%
group_by(artist, album) %>%
summarise(negativewords =n())
negative_words_per_song %>%
group_by(artist_album, song) %>%
summarise(negativewords =n())
negative_words_per_song %>%
group_by(artist_album, song) %>%
summarise(negativewords =n()) %>%
left_join(words_per_song, by = c("artist_album", "song"))
negative_words_per_song %>%
group_by(artist_album, song) %>%
summarise(negativewords =n()) %>%
left_join(words_per_song, by = c("artist_album", "song")) %>%
mutate(ratio = negativewords/words)
negative_words_per_song %>%
group_by(artist_album, song) %>%
summarise(negativewords =n()) %>%
left_join(words_per_song, by = c("artist_album", "song")) %>%
mutate(ratio = round(negativewords/words, 3))
negative_words_per_song %>%
group_by(artist_album, song) %>%
summarise(negativewords =n()) %>%
left_join(words_per_song, by = c("artist_album", "song")) %>%
mutate(ratio = round(negativewords/words, 2))
negative_words_per_song %>%
group_by(artist_album, song) %>%
summarise(negativewords =n()) %>%
left_join(words_per_song, by = c("artist_album", "song")) %>%
mutate(ratio = round(negativewords/words, 2)) %>%
ungroup()
negative_ratio <- negative_words_per_song %>%
group_by(artist_album, song) %>%
summarise(negativewords =n()) %>%
left_join(words_per_song, by = c("artist_album", "song")) %>%
mutate(ratio = round(negativewords/words, 2)) %>%
ungroup()
View(negative_ratio)
ggplot(negative_ratio, aes(song, ratio, fill = artist_album)) %>%
geom_col()
ggplot(negative_ratio, aes(song, ratio, fill = artist_album)) +
geom_col()
ggplot(negative_ratio, aes(song, ratio, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x")
ggplot(negative_ratio, aes(song, ratio, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 2, scales = "free_x") +
coord_flip()
ggplot(negative_ratio, aes(song, ratio, fill = artist_album)) +
geom_col(show.legend = FALSE) +
facet_wrap(~artist_album, ncol = 1, scales = "free_y") +
coord_flip()
